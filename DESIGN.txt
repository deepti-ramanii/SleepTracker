Our project is an app that allows users to track their sleep over time and view various statistics and trends regarding their sleep. This meant that our app is heavily centered around storing, manipulating, and retrieving data across sessions of the app, so we needed this data to be permanently stored somewhere. In order to accomplish this, we created and managed a SQLite database with a class called SleepStatsDatabase. This class created and kept track of a database table, with columns for storing when the user went to sleep, when they woke up, and the quality of their sleep. The class also contained a method for adding new rows to the table to store the user’s logged information, as well as a method for retrieving rows from the table that contained information between certain dates. 
One of the biggest challenges when implementing this database was making sure that every single class in the project had access to the same database. Early on, there was a problem where different classes were making multiple instances of SleepStatsDatabase. This resulted in a lot of data getting lost and we ran into errors when we tried to retrieve and display that data. To fix this problem, we created a method called getInstance() which made SleepStatsDatabase a singleton class. If SleepStatsDatabase had never been instantiated prior to the current call, then a new instance would be created, otherwise the first created instance would be returned. This meant that all classes in the project were working with the same instance of the database manager and made sure that all of our stored data was accessible.
Another big part of our app involves working with dates. Because we wanted to store sleep times and wake times in the database, we had to figure out how to store them in a way that they could be sorted (since we wanted to be able to retrieve entries between certain dates). While we initially thought of using formatted Strings, we wouldn’t have been able to sort them, so we ended up using longs instead. After some research on working with Dates in Android, we realized that we could get the user’s current date and time as a long representing the number of milliseconds that had passed from January 1, 1970 00:00:00 UTC. Using this, we were able to store the user’s sleep and wake up times as longs in the database, and were able to find entries that fell between two other dates by finding logged sleep time longs between the given start and end date longs. Finally, in order to display those longs as dates, we created a helper method that would take a long date and return a Date object representing that date.
Another problem we faced was regarding input, specifically, the user logging their sleep and wake up times. We wanted that information to carry over across sessions (for example, if the user had logged a sleep time and closed the app, we wanted them to be able to open up the app and log their wake up time). The problem with this was all of the variables and stored information in the classes and activities would be reset when the app was opened and closed. Thus, we needed to find a way to store that information when the app was closed, and retrieve it when the app was reopened. We did this using two methods called onSaveInstanceState and onRestoreInstanceState. This made it possible for the previous state of the activity to carry over even after the app was closed. Implementing this made it so that the user only had to press one button to log their sleep and wake up times, making the app feel a lot more comfortable and easy to use.
A fourth design choice we had to make was regarding which stats to show the user. We choose a graph of the sleep rating each day so the user could see which days they slept well and which ones they didn’t. This way they can reflect on why they might have not slept well and what they could change. We also showed them their average sleep and wake up times so they can decide if they want to sleep earlier or later and when to wake up. The average hours of sleep shows how much sleep they’re getting in case they need to adjust that or have a large variance of sleep hours, and the average sleep rating shows how well they slept in general throughout the chosen time period. All of these work together so the user can reflect and make changes if needed. 
